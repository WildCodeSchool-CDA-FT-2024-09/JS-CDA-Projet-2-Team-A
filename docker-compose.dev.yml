services:
  db:
    image: postgres
    env_file: ./server/.env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    ports:
      - 8080:8080
    container_name: adminer
    restart: always
    depends_on:
      db:
        condition: service_healthy

  server:
    build: ./server
    volumes:
      - ./server/src:/app/src
      - ./server/data:/app/data
      - ./server/index.ts:/app/index.ts
    env_file: ./server/.env
    command: npm run dev
    restart: always
    depends_on:
      db:
        condition: service_healthy

  client:
    build: ./client
    volumes:
      - ./client/src:/app/src
      - ./server/data/mock:/server/data/mock
    env_file: ./client/.env
    command: npm run dev
    restart: always

  uploads:
    build: ./uploads
    ports:
      - 3002:3002
    volumes:
      - ./uploads/src:/app/src
      - ./uploads/uploads:/app/uploads
    env_file: ./uploads/.env
    command: npm run dev
    restart: always 
    depends_on:
      - db

  gateway:
    image: nginx
    ports:
      - 5000:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server
      - client
      - uploads
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--silent",
          "--fail",
          "http://client:5173/",
          "&&",
          "curl",
          "--silent",
          "--fail",
          "http://server:8000/",
          "&&",
          "curl",
          "--silent",
          "--fail",
          "http://uploads:3002/"
        ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
